{
  "name": "stream-from-to",
  "version": "1.4.2",
  "description": "Utility for piping to/from a stream from a variety of sources to a variety of destinations",
  "main": "index.js",
  "scripts": {
    "test": "tape test.js"
  },
  "author": {
    "name": "Alan Shaw"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git@github.com:alanshaw/stream-from-to.git"
  },
  "homepage": "https://github.com/alanshaw/stream-from-to",
  "dependencies": {
    "async": "^0.9.0",
    "series-stream": "^1.0.1",
    "concat-stream": "^1.4.7",
    "mkdirp": "^0.5.0"
  },
  "devDependencies": {
    "rimraf": "^2.3.1",
    "tape": "^3.4.0",
    "through": "~2.3.4"
  },
  "readme": "stream-from-to [![Build Status](https://travis-ci.org/alanshaw/stream-from-to.svg)](https://travis-ci.org/alanshaw/stream-from-to) [![Dependency Status](https://david-dm.org/alanshaw/stream-from-to.svg)](https://david-dm.org/alanshaw/stream-from-to)\n===\nUtility for piping to/from a stream from a variety of sources to a variety of destinations.\n\nPass stream-from-to a function that creates a [through](https://npmjs.org/package/through) stream and it'll give you back an object that simplifies the constructon of source and destination streams for piping to/from the through stream.\n\nUsage examples\n---\n\n```javascript\nvar streamft = require(\"stream-from-to\")\n  , through = require(\"through\")\n\nvar mdToHtml = function (filePath) {\n  // Through stream that converts markdown to HTML\n  return through()\n}\n\nstreamft(mdToHtml).from.path(\"/path/to/doc.md\").to.path(\"/path/to/doc.html\", function (er) {\n    if (er) return console.error(er)\n    // Done!\n})\n```\n\nWith [brfs](https://github.com/substack/brfs):\n\n```javascript\nvar streamft = require(\"stream-from-to\")\n  , brfs = require(\"brfs\")\n\nstreamft(brfs).from(\"src/index.js\").to(\"dist/index.js\")\n```\n\nAPI\n---\n\n### from.path(path, opts)\n\nCreate a readable stream from `path` and pipe to the through stream. `path` can be a single path or array of paths.\n\n### from.string(string)\n\nCreate a readable stream from `string` and pipe to the through stream. `string` can be a single string or array of strings.\n\n### concat.from.paths(paths, opts)\n\nCreate and concatinate readable streams from `paths` and pipe to the through stream.\n\n### concat.from.strings(strings, opts)\n\nCreate and concatinate readable streams from `strings` and pipe to the through stream.\n\n### to.path(path, cb)\n\nCreate a writeable stream to `path` and pipe output from the through stream to it. `path` can be a single path, or array of output paths if you specified an array of inputs. The callback function `cb` will be invoked when data has finished being written.\n\n### to.buffer(opts, cb)\n\nCreate a [concat-stream](https://npmjs.org/package/concat-stream) and pipe output from the through stream to it. The callback function `cb` will be invoked when the buffer has been created.\n\n### to.string(opts, cb)\n\nCreate a [concat-stream](https://npmjs.org/package/concat-stream) and pipe output from the through stream to it. The callback function `cb` will be invoked when the string has been created.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/alanshaw/stream-from-to/issues"
  },
  "_id": "stream-from-to@1.4.2",
  "dist": {
    "shasum": "e48771ffc62e0bbaa5fd8a616540157cd3d291ca"
  },
  "_from": "stream-from-to@^1.4.2",
  "_resolved": "https://registry.npmjs.org/stream-from-to/-/stream-from-to-1.4.2.tgz"
}
